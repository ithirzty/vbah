// Used for translating a shape by x and y.
translateShape(v vec, shape []float) {
    i=0; for i < len(shape), i+=2 {
        shape[i] = shape[i] + v.x
        shape[i+1] = shape[i+1] + v.y
    }
}

//Used for generating a circle from a shape.
circleFromShape(v vec*, rad float*, shape []float) {
    centerCoords(v, shape)
    min = vec{}
    minCoords(&min, shape)
    max = vec{}
    maxCoords(&max, shape)
    radX = v.x - min.x
    radY = v.y - min.y
    minRad = radX + radY / 2.0
    radX = max.x - v.x
    radY = max.y - v.y
    maxRad = radX + radY / 2.0
    if minRad > maxRad {
        *rad = minRad
    } else {
        *rad = maxRad
    }
}

//Used for converting degrees into radians.
degToRad(d float) float {
    return d * 3.14159 / 180.0
}


//Used for rotating a shape.
//Rotation in degrees.
rotateShape(rot float, shape []float) {
    rot = degToRad(rot)
    mat = vec4(cos(rot), -1.0 * sin(rot), sin(rot), cos(rot))
    nx = vec{}
    ny = vec{}
    i=0; for i < len(shape), i+=2 {
        s = vec(shape[i], shape[i+1])
        rs = mat * s
        shape[i] = rs.x
        shape[i+1] = rs.y
    }
}

//Used for detecting if two circle are colliding.
detectCollideCircle(v1 vec, radius1 float, v2 vec, radius2 float) bool {
    dist = vec(v1.x - v2.x, v1.y - v2.y)
    sumRad = radius1 + radius2
    if dist.x * dist.x + dist.y * dist.y <= sumRad * sumRad {
        return true
    }
    return false
}
