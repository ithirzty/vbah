//OpenGL
#include "<GL/gl.h>"
//Glut
#include "<GL/glut.h>"
//FreeType
#include "<ft2build.h>"
#include "<freetype/freetype.h>"


#linux {
    #cLib "lGL" "lglut" "lGLU" "w $(pkg-config --libs freetype2) $(pkg-config --cflags freetype2)"

    #static {
        #warning "You may need to compile the program as a dynamic executable (-d)."
    }
}

#windows {

    #static {
        #cLib "lfreeglut_static"
    }

    #dynamic {
        #cLib "lfreeglut" "lfreetype"
    }

    #cLib "lopengl32"  "lGLU32" "Wl,--subsystem,windows"

    #define! playSound(p cpstring, hmod int, fdwSound ptr) bool

}



//Maths
#define! cos(f float) float
#define! sin(f float) float
#define! sqrt(f float) float

//Glut
#define! glutSwapBuffers()
#define! glutInit(argc int*, char**)
#define! glutInitDisplayMode(dm ptr)
#define! glutInitWindowSize(w int,h int)
#define! glutInitWindowPosition(x int,y int)
#define! glutCreateWindow(t cpstring)
#define! glutDisplayFunc(f function())
#define! glutIdleFunc(f function())
#define! glutPostRedisplay()
#define! glutMainLoop()

//OpenGL
#define! GLuint uint
#define! GLenum ptr
#define! GLubyte char

#define! glClearColor(r float, g float, b float, a float)
#define! glClear(b ptr)
#define! glBegin(c ptr)
#define! glColor3f(r float, g float, b float)
#define! glVertex2f( x float, y float )
#define! glEnd()
#define! glColor3f(r float, g float, b float) 
#define! glRasterPos2f(x float, y float)
#define! glutBitmapString(font ptr, str cpstring)
#define! glEnable(m ptr)
#define! glDisable(m ptr)
#define! glGenTextures(i int, t GLuint*)
#define! glBindTexture(tm ptr, t GLuint)
#define! glTexEnvf(tenv ptr, tm ptr, mod ptr)
#define! glTexParameterf(tm ptr, mn ptr, mv ptr)
#define! gluBuild2DMipmaps(tm ptr, nb int, w int, h int, colors ptr, cont ptr, data cpstring)
#define! glTexCoord2f(x float, y float)
#define! glutMouseFunc(f ptr)
#define! glutMotionFunc(f ptr)
#define! glutPassiveMotionFunc(f ptr)
#define! glutKeyboardFunc(f ptr)
#define! glutFullScreen()
#define! glutGet(m ptr) int
#define! gluOrtho2D(l float, r float, b float, t float)
#define! glViewport(l int, t int, r int, b int)
#define! glMatrixMode(m ptr)
#define! glLoadIdentity()
#define! glutReshapeFunc(f ptr)
#define! gluUnProject(wx float, wy float, wz float, m ptr, p ptr, v ptr, x float*, y float*, z float*)
#define! glGetDoublev(w ptr, t float*)
#define! glGetIntegerv(w ptr, t int*)
#define! glGetBooleanv(w ptr, b bool*)
#define! glPushMatrix()
#define! glPopMatrix()
#define! glTranslated(x float, y float, z float)
#define! glRotated(deg float, x float, y float, z float)
#define! glutReshapeWindow(w int, h int)
#define! glLineWidth(w float)
#define! glGenFramebuffers(nb int, n GLuint*)
#define! glBindFramebuffer(w ptr, n GLuint)
#define! glTexImage2D(t ptr, m int, c1 ptr, w int, h int, d int, c2 ptr, it ptr, im ptr)
#define! glFramebufferTexture(w ptr, ca ptr, t GLuint, nb int)
#define! glDrawBuffers(l int, db GLenum*)
#define! glActiveTexture(t GLuint)
#define! glutBitmapCharacter(f ptr, c char)
#define! glutBitmapWidth(font ptr, c char) int
#define! glutSpecialFunc(fn ptr)
#define! glutGetModifiers() int
#define! glScissor(x int, y int, w int, h int)
#define! glScissorIndexed(i int, x int, y int, w int, h int)
#define! glIsEnabled(w ptr) bool
#define! glBlendFunc(scr uint, fn ptr)
#define! glWindowPos3dv(pos float*)
#define! glGenLists(s int) GLuint
#define! glNewList(list GLuint, mode GLenum)
#define! glBitmap(w int, h int, xo int, yo int, xmove int, ymove int, bmp GLubyte*)
#define! glEndList()


//FreeType
#define! FT_Library ptr
#define! FT_Face ptr
#define! FT_GlyphSlot ptr

#define! FT_Init_FreeType(l FT_Library*) int
#define! FT_New_Face(l FT_Library, p cpstring, i int, f FT_Face*) int
#define! FT_Done_Face(f FT_Face*)
#define! FT_Set_Char_Size(f FT_Face, w int, h int, resH int, resV int) int
#define! FT_Set_Pixel_Sizes(f FT_Face, w int, h int)
#define! FT_Get_Char_Index(f FT_Face, c uint) uint
#define! FT_Load_Char(f FT_Face, c uint, f int) int
#define! FT_Select_Charmap(f FT_Face, e int) int

struct! FT_Bitmap_ {
    rows: uint32
    width: uint32
    pitch: int32
    num_grays: ushort
    pixel_mode: char
    palette_mode: char
    palette: ptr
}