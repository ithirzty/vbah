/////////////////////////////////////////////////////////////
//   Particles system demo using OpenGL and GLUT in Bah.   //
//       To compile, use 'bah ./particles.bah -d'.         //
//                                                         //
//                                     © Aloïs Laurent Boë //
/////////////////////////////////////////////////////////////

#import "iostream.bah"
#import "time.bah"
#import "rand.bah"

#import "../vbah.bah"

win window*

//Used for generating a random float between 0.0 and 1.0.
randFloat() float {
    f = <float>randomInRange(0, 100000) / 100000.0
    return f
}


//Representation of a single particle.
struct part {
    x: float = 0.0
    y: float = 0.0
    velX: float = 0.0
    velY: float = 0.0

    radius: float = 0.08

    r: float = 1.0
    g: float = 1.0
    b: float = 1.0

    //Used for colliding the particle with the borders of the window.
    collideBorders() {
        
        if this.x - this.radius <= win.lb {
            this.x = win.lb + this.radius
            this.velX = -0.9 * this.velX
        } else if this.x + this.radius >= win.rb {
            this.x = win.rb - this.radius
            this.velX = -0.9 * this.velX
        }
        if this.y - this.radius <= win.bb {
            this.y = win.bb + this.radius
            this.velY = -0.9 * this.velY
        } else if this.y + this.radius >= win.tb {
            this.y = win.tb - this.radius
            this.velY = -0.9 * this.velY
        }
    }

    //Used for colliding a particle with another.
    collide(p part*) {
        distX = this.x - p.x
        distY = this.y - p.y
        sumRad = this.radius + p.radius

        if distX * distX + distY * distY <= sumRad * sumRad {
            distX2 = distX * distX
            distY2 = distY * distY
            dist = sqrt(distX2 + distY2)
            if dist == 0.0 {
                dist = 1.0
            }
            velX = distX / dist
            velY = distY / dist
            if p != null {
                p.velX = p.velX + velX * -0.4
                p.velY = p.velY + velY * -0.4
            }
            this.velX = this.velX + velX * 0.4
            this.velY = this.velY + velY * 0.4
            sumRad = sumRad + 0.0001
            this.x = p.x + sumRad * velX
            this.y = p.y + sumRad * velY
        }
    }

    //Used for drawing the particle.
    draw() {
        this.x = this.x + this.velX * win.delta
        this.y = this.y + this.velY * win.delta
        this.collideBorders()
        drawCircle(vec(this.x, this.y), this.radius, rgb(this.r, this.g, this.b))
    }

}

//A wrapper for the whole particle system.
struct ps {
    gravity: float = 5.0
    globalRad: float = 0.02
    nbParts: int = 20
    parts: []part*
    lastNB: int

    
    //Used for initiating the particle system.
    init() {
        this.lastNB = this.nbParts
        i=0; for i < this.nbParts {
            p = new part
            p.radius = this.globalRad
            p.velX = randFloat() - 0.5
            p.velY = randFloat() - 0.5
            p.r = randFloat()
            p.g = randFloat()
            p.b = randFloat()
            this.parts[i] = p
            i = i + 1
        }
    }

    //Used for adding a particle.
    add(nb int, x float, y float, rad float) {
        i = 0; j = 0
        for i < nb {
            p = new part
            p.radius = this.globalRad
            p.velX = randFloat() - 0.5
            p.velY = randFloat() - 0.5
            p.r = randFloat()
            p.g = randFloat()
            p.b = randFloat()
            p.x = x
            p.radius = rad
            p.y = y
            placed = false
            for j < len(this.parts) {
                op = this.parts[j]
                if op == null {
                    placed = true
                    this.parts[j] = p
                    break
                }
                j = j + 1
            }
            if placed == false {
                this.parts[len(this.parts)] = p
                this.lastNB = len(this.parts)
            }
            this.nbParts = this.nbParts + 1
            i = i + 1
        }
    }

    //Used for deleting particles at the specified coordinates.
    remove(x float, y float) {
        i=0; for i < len(this.parts) {
            p = this.parts[i]
            if p == null {
                i = i + 1
                continue
            }
            distX = x - p.x
            distY = y - p.y
            sumRad = p.radius
            if distX * distX + distY * distY <= sumRad * sumRad {
                this.parts[i] = null
                this.nbParts = this.nbParts - 1
            }
            i = i + 1
        }
    }

    nbCol: int

    //Used for colliding and drawing every particles.
    draw() {
        this.nbCol = 0
        wasNull = 0
        firstNull = 0
        i=0; for i < this.lastNB {
            p = this.parts[i]
            if p == null {
                if wasNull == 0 {
                    firstNull = i
                    wasNull = 1
                }
                i = i + 1
                continue
            } else {
                wasNull = 2
            }
            p.velY = p.velY - this.gravity * win.delta
            j=i+1; for j < this.lastNB {
                p1 = this.parts[j]
                if p1 == null {
                    j = j + 1
                    continue
                }
                this.nbCol = this.nbCol + 1
                p.collide(p1)
                j = j + 1
            }
            p.draw()
            i = i + 1
        }
        if wasNull == 1 {
            this.lastNB = firstNull
        }
    }

}



particles ps
lastPart int

//Called on each frame.
display() {
    //Adding a particle evry second.
    if particles.nbParts < 20 && getTimeUnix() - lastPart > 1000000000 {
        particles.add(1, 0.0, 0.0, 0.055)
        lastPart = getTimeUnix()
    }
    //Drawing particles.
    particles.draw()
    
    //drawing the fps count at the top left of the window.
    //0px from the left
    //24px from the top
    tp = vec(0.0, 24.0)
    pixelsToCoords(&tp)
    drawText(tp, rgb(1.0, 1.0, 1.0), VBAH_font_times_roman_24, intToStr(win.fps())+" fps\n"+intToStr(particles.nbParts)+" particles\n"+intToStr(particles.nbCol)+" col/frame")

    tp = vec(0.0, <float>win.height - 34.0)
    pixelsToCoords(&tp)
    drawText(tp, rgb(0.8, 0.8, 0.8), VBAH_font_times_roman_24, "Press 'f' to toggle fullscreen.\nPress 'g' to toggle gravity.")

}

currentBtn int

handleMouse(x int, y int) {
    f = vec(<float>x, <float>y)
    pixelsToCoords(&f)
    if currentBtn == MOUSE_LEFT_BUTTON {
        particles.add(1, f.x, f.y, 0.04)
    } else if currentBtn == MOUSE_RIGHT_BUTTON {
        particles.remove(f.x, f.y)
    }
}

click(btn int, pressed bool, x int, y int) {
    if pressed == false {
        return
    }
    currentBtn = btn
    handleMouse(x, y)
}

kb(key char, mod int) {
    if key == 'f' {
        win.fullscreen()
    } else if key == 'g' {
        if particles.gravity == 0.0 {
            particles.gravity = 5.0
        } else {
            particles.gravity = 0.0
        }
    }
}

main(args []cpstring) int {
    //particle system
    particles = ps{}
    particles.globalRad = 0.055
    particles.nbParts = 20
    particles.init()
    lastPart = getTimeUnix()

    //launching the window
    win = window(600, 600, "Particles")
    win.display = display
    win.click = click
    win.keyboard = kb
    win.drag = handleMouse
    win.launch()

    return 0
}
